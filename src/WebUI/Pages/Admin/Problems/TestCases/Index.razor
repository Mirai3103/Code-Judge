@page "/Admin/Problems/{id:int}/TestCases"
@using Code_Judge.Domain.Entities
@using Code_Judge.WebUi.Services
@using MediatR
@using Code_Judge.Application.Problems.Queries.GetProblemById
@using Code_Judge.Application.TestCases.Commands.DeleteTestCase
@using Code_Judge.Application.TestCases.Queries.GetTestCases
@layout AdminLayout
@if (_problem is not null)
{
    <div class="flex gap-y-5 flex-col  w-full ">
        <div class="prose grow    py-6  px-2">
            <h2>@($"{_problem.Id} - {_problem.Name}")</h2>
            @((MarkupString)Markdig.Markdown.ToHtml(_problem.Description))
        </div>
        <div class="py-6 flex justify-between items-center">
            <h2 class="text-2xl font-bold">
                Test Cases Management
            </h2>
            <button class="btn btn-primary" @onclick="CreateTestCaseClicked">
                Create New Test Case
            </button>
        </div>
        <div class=" px-10">
            <div class="overflow-x-auto">
                <table class="table table-zebra">
                    <thead>
                    <tr>
                        <th>#</th>
                        <th>
                            Input
                        </th>
                        <th>
                            Output
                        </th>
                        <th>
                            Is Hidden
                        </th>
                        <th>
                            <i class="fa-solid fa-ellipsis"></i>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <!-- row 1 -->
                    @foreach (var testcase in _testCases)
                    {
                        <tr>
                            <td>
                                @testcase.Id
                            </td>
                            <td>
                                @(testcase.Input.Length > 50 ? testcase.Input.Substring(0, 45) + "..." : testcase.Input)

                            </td>
                            <td>
                                @(testcase.Output.Length > 50 ? testcase.Output.Substring(0, 45) + "..." : testcase.Output)
                            </td>
                            <td>
                                @testcase.IsHidden.ToString()
                            </td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-warning">
                                        Edit
                                    </button>
                                    <button class="btn btn-error" @onclick="CreateConfirmDeleteTestCaseClicked(testcase)">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <YesNoDialog   @ref="YesNoDialogRef" Title="@_deleteText" Message="Are you sure you want to delete this test case?" />
    <CreateTestCaseModal ProblemId="@_problem.Id" Id="@_createModalId" @ref="CreateTestCaseModalRef" OnTestCaseCreated="@OnTestCaseCreated"/>
}

    @code {
    private YesNoDialog YesNoDialogRef { get; set; } = null!;
    private Problem? _problem ;
    private ICollection<TestCase> _testCases = null!;
    private readonly Guid _createModalId = Guid.NewGuid();
    
    [Inject]
    public IMediator Mediator { get; set; } = null!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    IToastService ToastService { get; set; } = null!;

    [Parameter]
    public int Id { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;
    private string _deleteText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var getProblemQuery = new GetProblemByIdQuery(Id);
        var getTestCaseQuery = new GetTestCasesQuery(Id);
        var getProblemResult = await Mediator.Send(getProblemQuery);

        if (getProblemResult is null)
        {
            NavigationManager.NavigateTo("/Admin/Problems");
            ToastService.Error("Problem not found");
        }
        else
        {
            var getTestCaseResult = await Mediator.Send(getTestCaseQuery);

            _problem = getProblemResult;
            _testCases = getTestCaseResult;
        }
    }

    private async Task CreateTestCaseClicked()
    {
        await JsRuntime.InvokeVoidAsync("showModal", _createModalId.ToString());
    }
   private  void OnTestCaseCreated(TestCase testCase)
   {
       _testCases = _testCases.Prepend(testCase).ToList();
        StateHasChanged();
    }
    private CreateTestCaseModal CreateTestCaseModalRef { get; set; } = null!;
    private Action CreateConfirmDeleteTestCaseClicked(TestCase testCase)
    {
        return () =>
        {
            YesNoDialogRef?.Show();
            _deleteText=$"Delete Test Case #{testCase.Id}"; 

            YesNoDialogRef!.OnYes =  () =>
            {
                var deleteTestCaseCommand = new DeleteTestCaseCommand(testCase.Id);
                Mediator.Send(deleteTestCaseCommand);
                ToastService.Success("Test Case Deleted");
                _testCases = _testCases.Where(x => x.Id != testCase.Id).ToList();
                StateHasChanged();
            };
            YesNoDialogRef.OnNo = () =>
            {
                ToastService.Info("Canceled");
            };
        };
    }
        

}