@page "/Problems/{Slug}"
@using Code_Judge.Domain.Entities
@using MediatR
@using Code_Judge.Application.Problems.Queries.GetProblemBySlug
@using BlazorMonaco
@using BlazorMonaco.Editor
@using Code_Judge.Application.Common.Models
@using Code_Judge.Application.Submissions.Commands.SubmissionRunningStream
@using Code_Judge.Application.Submissions.Commands.TestSubmission
@using Code_Judge.Application.Submissions.Queries

@using Code_Judge.Application.TestCases.Queries.GetTestCases
@using Code_Judge.Domain.Enums
@using Code_Judge.WebUi.Services
@if (Problem is not null)
{
    <div class="flex justify-evenly h-[calc(100vh-70px)] bg-base-200 gap-x-1 w-full ">
        <ProblemDescription Problem="Problem">
            
        </ProblemDescription>
        <div class="w-1/2 px-1 bg-base-100">

            <div class="h-[calc(100vh-70px)] py-2 flex gap-y-2 flex-col">
                <div class="m-1 gap-x-5 flex">
                    <div className="form-control w-full max-w-xs">
                        <label className="label">
                            <span className="label-text">
                                Language
                            </span>
                        </label>
                        <InputSelect className="select select-bordered" @bind-Value="Language">
                            @foreach (ProgramingLanguage language in Enum.GetValues(typeof(ProgramingLanguage)))
                            {
                                <option value="@language">@language.ToFriendlyString()</option>
                            }
                        </InputSelect>
                    </div>
                    <div className="form-control w-full max-w-xs">
                        <label className="label">
                            <span className="label-text">
                                Theme
                            </span>
                        </label>
                        <InputSelect className="select select-bordered" @bind-Value="Theme">
                            <option value="vs-dark">
                                Dark
                            </option>
                            <option value="vs">
                                Light
                            </option>
                        </InputSelect>
                        <button class="btn btn-ghost btn-sm" @onclick="ClearEditor">
                            Clear
                        </button>
                    </div>
                </div>
                <StandaloneCodeEditor @ref="StandaloneCodeEditorRef" CssClass="h-full grow" Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions"/>
                <div class="flex justify-end gap-x-2">
                    <button class="btn-ghost btn btn-secondary" @onclick="Run" disabled="@(IsRunningTest || @IsSubmitting)">
                        Run
                    </button>
                    <button class="btn-secondary btn" @onclick="Submit" disabled="@(IsRunningTest || @IsSubmitting)">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <Modal @ref="RunTestModalRef">
        <h3 class="font-bold text-lg">
            Running...
        </h3>
        @if (Results.Any())
        {
            foreach (var result in Results)
            {
                <TestCaseResultShow Result="result"/>
            }
        }
        <div class="modal-action">
            <button class="btn">Close</button>
        </div>
    </Modal>
    <Modal @ref="SubmitModalRef">
        <h3 class="font-bold text-lg">
            Submitting...
        </h3>
        @if (ResultsStream is not null)
        {
            foreach (var result in ResultsStream)
            {
                <TestCaseResultShow Result="result"/>
            }
        }
        <div class="modal-action">

            <button class="btn">Close</button>
            @if (!IsSubmitting)
            {
                <a class="btn btn-primary" href="/Problems/@(Problem.Id)/MySubmissions">
                    View Submission
                </a>
            }
        </div>
    </Modal>
}

@code {
    private Modal RunTestModalRef { get; set; } = default!;
    private Modal SubmitModalRef { get; set; } = default!;
    private ICollection<ExecuteCodeResult> ResultsStream { get; set; } = new List<ExecuteCodeResult>();

    [Parameter]
    public string? Slug { get; set; }

    private Problem? Problem { get; set; }

    [Inject]
    public IMediator _mediator { get; set; } = default!;

    [Inject]
    public NavigationManager _navigationManager { get; set; } = default!;

    [Inject]
    public IJSRuntime _jsRuntime { get; set; } = default!;

    private ICollection<ExecuteCodeResult> Results { get; set; } = new List<ExecuteCodeResult>();
    private ICollection<TestCase> TestCases { get; set; } = null!;
    private ProgramingLanguage _language = ProgramingLanguage.Cpp;
    private bool IsSubmitting { get; set; } = false;
    private bool IsRunningTest { get; set; } = false;

    [Inject]
    private IToastService ToastService { get; set; } = default!;

    private ProgramingLanguage Language
    {
        get => _language;
        set
        {
            this.OnLanguageChanged(value).GetAwaiter();
            _language = value;
        }
    }

    private string _theme = "vs-dark";

    private string Theme
    {
        get => _theme;
        set
        {
            this.OnThemeChange(value).GetAwaiter();
            _theme = value;
        }
    }


    private StandaloneCodeEditor StandaloneCodeEditorRef { get; set; } = default!;

    private async Task OnLanguageChanged(ProgramingLanguage language)
    {
        var model = await StandaloneCodeEditorRef.GetModel();
        await Global.SetModelLanguage(model, language.ToMonacoId());
    }

    private async Task OnThemeChange(string Theme)
    {
        await Global.SetTheme(Theme);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = Language.ToFriendlyString(),
            Value = "",
            Theme = "vs-dark"
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Slug is null) _navigationManager.NavigateTo("/");
        var command = new GetProblemBySlugQuery(Slug);
        Problem = await _mediator.Send(command);
        if (Problem is null)
        {
            _navigationManager.NavigateTo("/");
        }
        var testCasesCommand = new GetTestCasesQuery(Problem!.Id);
        TestCases = await _mediator.Send(testCasesCommand);
    }

    private async Task Run()
    {
        if (!await Validate()) return;
        IsRunningTest = true;
        Results = TestCases.Where(t => !t.IsHidden).Select(t => new ExecuteCodeResult() { Status = SubmissionStatus.Running, TestCase = t }).ToList();
        var testSubmission = new TestSubmissionCommand()
        {
            Language = Language,
            Code = await StandaloneCodeEditorRef.GetValue(),
            ProblemId = Problem!.Id
        };
        var results = _mediator.Send(testSubmission);

        RunTestModalRef.Show();
        Results = await results;
        IsRunningTest = false;
    }

    private async Task<bool> Validate()
    {
        var code = await StandaloneCodeEditorRef.GetValue();
        if (!string.IsNullOrWhiteSpace(code)) return true;
        ToastService.Error("Code is required");
        return false;
    }

    private async Task Submit()
    {
        if (!await Validate()) return;
        IsSubmitting = true;

        ResultsStream = TestCases.Select(t => new ExecuteCodeResult() { Status = SubmissionStatus.Running, TestCase = t }).ToList();
        StateHasChanged();
        SubmitModalRef.Show();
        await Task.Delay(100);

        var testSubmission = new SubmissionRunningStream()
        {
            Language = Language,
            Code = await StandaloneCodeEditorRef.GetValue(),
            ProblemId = Problem!.Id
        };
        await foreach (var result in  _mediator.CreateStream(testSubmission))
        {
            var exist = ResultsStream.FirstOrDefault(r => r.TestCase!.Id == result.TestCase!.Id);
            if (exist is null) continue;
            exist.Status = result.Status;
            exist.Output = result.Output;
            exist.TimeElapsed = result.TimeElapsed;
            exist.MemoryUsage = result.MemoryUsage;
            exist.Output = result.Output;
            exist.IsSuccess = result.IsSuccess;
            exist.Error = result.Error;
            StateHasChanged();
        }
        var getLatestSubmission = new GetUserLatestSubmissionQuery();
        IsSubmitting = false;
    }


    private async Task ClearEditor()
    {
        await StandaloneCodeEditorRef.SetValue("");
    }

}